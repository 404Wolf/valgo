/*
Val Town API

Val Townâ€™s public API  OpenAPI JSON endpoint:  https://api.val.town/openapi.json

API version: 1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package valgo

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the BlobListingItem type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BlobListingItem{}

// BlobListingItem struct for BlobListingItem
type BlobListingItem struct {
	Key string `json:"key"`
	// Size in bytes of the object
	Size *int32 `json:"size,omitempty"`
	// Creation date of the object
	LastModified *time.Time `json:"lastModified,omitempty"`
}

type _BlobListingItem BlobListingItem

// NewBlobListingItem instantiates a new BlobListingItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBlobListingItem(key string) *BlobListingItem {
	this := BlobListingItem{}
	this.Key = key
	return &this
}

// NewBlobListingItemWithDefaults instantiates a new BlobListingItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBlobListingItemWithDefaults() *BlobListingItem {
	this := BlobListingItem{}
	return &this
}

// GetKey returns the Key field value
func (o *BlobListingItem) GetKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Key
}

// GetKeyOk returns a tuple with the Key field value
// and a boolean to check if the value has been set.
func (o *BlobListingItem) GetKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Key, true
}

// SetKey sets field value
func (o *BlobListingItem) SetKey(v string) {
	o.Key = v
}

// GetSize returns the Size field value if set, zero value otherwise.
func (o *BlobListingItem) GetSize() int32 {
	if o == nil || IsNil(o.Size) {
		var ret int32
		return ret
	}
	return *o.Size
}

// GetSizeOk returns a tuple with the Size field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlobListingItem) GetSizeOk() (*int32, bool) {
	if o == nil || IsNil(o.Size) {
		return nil, false
	}
	return o.Size, true
}

// HasSize returns a boolean if a field has been set.
func (o *BlobListingItem) HasSize() bool {
	if o != nil && !IsNil(o.Size) {
		return true
	}

	return false
}

// SetSize gets a reference to the given int32 and assigns it to the Size field.
func (o *BlobListingItem) SetSize(v int32) {
	o.Size = &v
}

// GetLastModified returns the LastModified field value if set, zero value otherwise.
func (o *BlobListingItem) GetLastModified() time.Time {
	if o == nil || IsNil(o.LastModified) {
		var ret time.Time
		return ret
	}
	return *o.LastModified
}

// GetLastModifiedOk returns a tuple with the LastModified field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlobListingItem) GetLastModifiedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.LastModified) {
		return nil, false
	}
	return o.LastModified, true
}

// HasLastModified returns a boolean if a field has been set.
func (o *BlobListingItem) HasLastModified() bool {
	if o != nil && !IsNil(o.LastModified) {
		return true
	}

	return false
}

// SetLastModified gets a reference to the given time.Time and assigns it to the LastModified field.
func (o *BlobListingItem) SetLastModified(v time.Time) {
	o.LastModified = &v
}

func (o BlobListingItem) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BlobListingItem) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["key"] = o.Key
	if !IsNil(o.Size) {
		toSerialize["size"] = o.Size
	}
	if !IsNil(o.LastModified) {
		toSerialize["lastModified"] = o.LastModified
	}
	return toSerialize, nil
}

func (o *BlobListingItem) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"key",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBlobListingItem := _BlobListingItem{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varBlobListingItem)

	if err != nil {
		return err
	}

	*o = BlobListingItem(varBlobListingItem)

	return err
}

type NullableBlobListingItem struct {
	value *BlobListingItem
	isSet bool
}

func (v NullableBlobListingItem) Get() *BlobListingItem {
	return v.value
}

func (v *NullableBlobListingItem) Set(val *BlobListingItem) {
	v.value = val
	v.isSet = true
}

func (v NullableBlobListingItem) IsSet() bool {
	return v.isSet
}

func (v *NullableBlobListingItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBlobListingItem(val *BlobListingItem) *NullableBlobListingItem {
	return &NullableBlobListingItem{value: val, isSet: true}
}

func (v NullableBlobListingItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBlobListingItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


