/*
Val Town API

Val Townâ€™s public API  OpenAPI JSON endpoint:  https://api.val.town/openapi.json

API version: 1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SqliteExecuteRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SqliteExecuteRequest{}

// SqliteExecuteRequest A single statement to run
type SqliteExecuteRequest struct {
	Statement SqliteExecuteRequestStatement `json:"statement"`
}

type _SqliteExecuteRequest SqliteExecuteRequest

// NewSqliteExecuteRequest instantiates a new SqliteExecuteRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSqliteExecuteRequest(statement SqliteExecuteRequestStatement) *SqliteExecuteRequest {
	this := SqliteExecuteRequest{}
	this.Statement = statement
	return &this
}

// NewSqliteExecuteRequestWithDefaults instantiates a new SqliteExecuteRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSqliteExecuteRequestWithDefaults() *SqliteExecuteRequest {
	this := SqliteExecuteRequest{}
	return &this
}

// GetStatement returns the Statement field value
func (o *SqliteExecuteRequest) GetStatement() SqliteExecuteRequestStatement {
	if o == nil {
		var ret SqliteExecuteRequestStatement
		return ret
	}

	return o.Statement
}

// GetStatementOk returns a tuple with the Statement field value
// and a boolean to check if the value has been set.
func (o *SqliteExecuteRequest) GetStatementOk() (*SqliteExecuteRequestStatement, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Statement, true
}

// SetStatement sets field value
func (o *SqliteExecuteRequest) SetStatement(v SqliteExecuteRequestStatement) {
	o.Statement = v
}

func (o SqliteExecuteRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SqliteExecuteRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["statement"] = o.Statement
	return toSerialize, nil
}

func (o *SqliteExecuteRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"statement",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSqliteExecuteRequest := _SqliteExecuteRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSqliteExecuteRequest)

	if err != nil {
		return err
	}

	*o = SqliteExecuteRequest(varSqliteExecuteRequest)

	return err
}

type NullableSqliteExecuteRequest struct {
	value *SqliteExecuteRequest
	isSet bool
}

func (v NullableSqliteExecuteRequest) Get() *SqliteExecuteRequest {
	return v.value
}

func (v *NullableSqliteExecuteRequest) Set(val *SqliteExecuteRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableSqliteExecuteRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableSqliteExecuteRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSqliteExecuteRequest(val *SqliteExecuteRequest) *NullableSqliteExecuteRequest {
	return &NullableSqliteExecuteRequest{value: val, isSet: true}
}

func (v NullableSqliteExecuteRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSqliteExecuteRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


