/*
Val Town API

Val Town’s public API  OpenAPI JSON endpoint:  https://api.val.town/openapi.json

API version: 1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package valgo

import (
	"encoding/json"
)

// checks if the ValsUpdateRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ValsUpdateRequest{}

// ValsUpdateRequest Note: you must supply at least one of the keys in this object in order to update a val
type ValsUpdateRequest struct {
	// This val’s name
	Name *string `json:"name,omitempty" validate:"regexp=^[a-zA-Z][a-zA-Z0-9_]*$"`
	// Readme contents, as Markdown
	Readme *string `json:"readme,omitempty"`
	// This val’s privacy setting. Unlisted vals do not appear on profile pages or elsewhere, but you can link to them.
	Privacy *string `json:"privacy,omitempty"`
	// The type of the val you want to update. Note that this does not include interval vals, because they cannot be created through the API yet.
	Type *string `json:"type,omitempty"`
}

// NewValsUpdateRequest instantiates a new ValsUpdateRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewValsUpdateRequest() *ValsUpdateRequest {
	this := ValsUpdateRequest{}
	return &this
}

// NewValsUpdateRequestWithDefaults instantiates a new ValsUpdateRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewValsUpdateRequestWithDefaults() *ValsUpdateRequest {
	this := ValsUpdateRequest{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ValsUpdateRequest) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValsUpdateRequest) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ValsUpdateRequest) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ValsUpdateRequest) SetName(v string) {
	o.Name = &v
}

// GetReadme returns the Readme field value if set, zero value otherwise.
func (o *ValsUpdateRequest) GetReadme() string {
	if o == nil || IsNil(o.Readme) {
		var ret string
		return ret
	}
	return *o.Readme
}

// GetReadmeOk returns a tuple with the Readme field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValsUpdateRequest) GetReadmeOk() (*string, bool) {
	if o == nil || IsNil(o.Readme) {
		return nil, false
	}
	return o.Readme, true
}

// HasReadme returns a boolean if a field has been set.
func (o *ValsUpdateRequest) HasReadme() bool {
	if o != nil && !IsNil(o.Readme) {
		return true
	}

	return false
}

// SetReadme gets a reference to the given string and assigns it to the Readme field.
func (o *ValsUpdateRequest) SetReadme(v string) {
	o.Readme = &v
}

// GetPrivacy returns the Privacy field value if set, zero value otherwise.
func (o *ValsUpdateRequest) GetPrivacy() string {
	if o == nil || IsNil(o.Privacy) {
		var ret string
		return ret
	}
	return *o.Privacy
}

// GetPrivacyOk returns a tuple with the Privacy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValsUpdateRequest) GetPrivacyOk() (*string, bool) {
	if o == nil || IsNil(o.Privacy) {
		return nil, false
	}
	return o.Privacy, true
}

// HasPrivacy returns a boolean if a field has been set.
func (o *ValsUpdateRequest) HasPrivacy() bool {
	if o != nil && !IsNil(o.Privacy) {
		return true
	}

	return false
}

// SetPrivacy gets a reference to the given string and assigns it to the Privacy field.
func (o *ValsUpdateRequest) SetPrivacy(v string) {
	o.Privacy = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ValsUpdateRequest) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValsUpdateRequest) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ValsUpdateRequest) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *ValsUpdateRequest) SetType(v string) {
	o.Type = &v
}

func (o ValsUpdateRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ValsUpdateRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Readme) {
		toSerialize["readme"] = o.Readme
	}
	if !IsNil(o.Privacy) {
		toSerialize["privacy"] = o.Privacy
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return toSerialize, nil
}

type NullableValsUpdateRequest struct {
	value *ValsUpdateRequest
	isSet bool
}

func (v NullableValsUpdateRequest) Get() *ValsUpdateRequest {
	return v.value
}

func (v *NullableValsUpdateRequest) Set(val *ValsUpdateRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableValsUpdateRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableValsUpdateRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableValsUpdateRequest(val *ValsUpdateRequest) *NullableValsUpdateRequest {
	return &NullableValsUpdateRequest{value: val, isSet: true}
}

func (v NullableValsUpdateRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableValsUpdateRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


