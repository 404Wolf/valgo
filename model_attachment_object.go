/*
Val Town API

Val Townâ€™s public API  OpenAPI JSON endpoint:  https://api.val.town/openapi.json

API version: 1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package valgo

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the AttachmentObject type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AttachmentObject{}

// AttachmentObject struct for AttachmentObject
type AttachmentObject struct {
	Content string `json:"content"`
	Filename string `json:"filename"`
	Type *string `json:"type,omitempty"`
	Disposition *string `json:"disposition,omitempty"`
	ContentId *string `json:"contentId,omitempty"`
}

type _AttachmentObject AttachmentObject

// NewAttachmentObject instantiates a new AttachmentObject object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAttachmentObject(content string, filename string) *AttachmentObject {
	this := AttachmentObject{}
	this.Content = content
	this.Filename = filename
	return &this
}

// NewAttachmentObjectWithDefaults instantiates a new AttachmentObject object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAttachmentObjectWithDefaults() *AttachmentObject {
	this := AttachmentObject{}
	return &this
}

// GetContent returns the Content field value
func (o *AttachmentObject) GetContent() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Content
}

// GetContentOk returns a tuple with the Content field value
// and a boolean to check if the value has been set.
func (o *AttachmentObject) GetContentOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Content, true
}

// SetContent sets field value
func (o *AttachmentObject) SetContent(v string) {
	o.Content = v
}

// GetFilename returns the Filename field value
func (o *AttachmentObject) GetFilename() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Filename
}

// GetFilenameOk returns a tuple with the Filename field value
// and a boolean to check if the value has been set.
func (o *AttachmentObject) GetFilenameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Filename, true
}

// SetFilename sets field value
func (o *AttachmentObject) SetFilename(v string) {
	o.Filename = v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *AttachmentObject) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AttachmentObject) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *AttachmentObject) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *AttachmentObject) SetType(v string) {
	o.Type = &v
}

// GetDisposition returns the Disposition field value if set, zero value otherwise.
func (o *AttachmentObject) GetDisposition() string {
	if o == nil || IsNil(o.Disposition) {
		var ret string
		return ret
	}
	return *o.Disposition
}

// GetDispositionOk returns a tuple with the Disposition field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AttachmentObject) GetDispositionOk() (*string, bool) {
	if o == nil || IsNil(o.Disposition) {
		return nil, false
	}
	return o.Disposition, true
}

// HasDisposition returns a boolean if a field has been set.
func (o *AttachmentObject) HasDisposition() bool {
	if o != nil && !IsNil(o.Disposition) {
		return true
	}

	return false
}

// SetDisposition gets a reference to the given string and assigns it to the Disposition field.
func (o *AttachmentObject) SetDisposition(v string) {
	o.Disposition = &v
}

// GetContentId returns the ContentId field value if set, zero value otherwise.
func (o *AttachmentObject) GetContentId() string {
	if o == nil || IsNil(o.ContentId) {
		var ret string
		return ret
	}
	return *o.ContentId
}

// GetContentIdOk returns a tuple with the ContentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AttachmentObject) GetContentIdOk() (*string, bool) {
	if o == nil || IsNil(o.ContentId) {
		return nil, false
	}
	return o.ContentId, true
}

// HasContentId returns a boolean if a field has been set.
func (o *AttachmentObject) HasContentId() bool {
	if o != nil && !IsNil(o.ContentId) {
		return true
	}

	return false
}

// SetContentId gets a reference to the given string and assigns it to the ContentId field.
func (o *AttachmentObject) SetContentId(v string) {
	o.ContentId = &v
}

func (o AttachmentObject) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AttachmentObject) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["content"] = o.Content
	toSerialize["filename"] = o.Filename
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Disposition) {
		toSerialize["disposition"] = o.Disposition
	}
	if !IsNil(o.ContentId) {
		toSerialize["contentId"] = o.ContentId
	}
	return toSerialize, nil
}

func (o *AttachmentObject) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"content",
		"filename",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAttachmentObject := _AttachmentObject{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAttachmentObject)

	if err != nil {
		return err
	}

	*o = AttachmentObject(varAttachmentObject)

	return err
}

type NullableAttachmentObject struct {
	value *AttachmentObject
	isSet bool
}

func (v NullableAttachmentObject) Get() *AttachmentObject {
	return v.value
}

func (v *NullableAttachmentObject) Set(val *AttachmentObject) {
	v.value = val
	v.isSet = true
}

func (v NullableAttachmentObject) IsSet() bool {
	return v.isSet
}

func (v *NullableAttachmentObject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAttachmentObject(val *AttachmentObject) *NullableAttachmentObject {
	return &NullableAttachmentObject{value: val, isSet: true}
}

func (v NullableAttachmentObject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAttachmentObject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


