/*
Val Town API

Val Townâ€™s public API  OpenAPI JSON endpoint:  https://api.val.town/openapi.json

API version: 1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package valgo

import (
	"encoding/json"
	"fmt"
)

// SqliteExecuteRequestStatement struct for SqliteExecuteRequestStatement
type SqliteExecuteRequestStatement struct {
	ParameterizedQuery *ParameterizedQuery
	String *string
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *SqliteExecuteRequestStatement) UnmarshalJSON(data []byte) error {
	var err error
	// try to unmarshal JSON data into ParameterizedQuery
	err = json.Unmarshal(data, &dst.ParameterizedQuery);
	if err == nil {
		jsonParameterizedQuery, _ := json.Marshal(dst.ParameterizedQuery)
		if string(jsonParameterizedQuery) == "{}" { // empty struct
			dst.ParameterizedQuery = nil
		} else {
			return nil // data stored in dst.ParameterizedQuery, return on the first match
		}
	} else {
		dst.ParameterizedQuery = nil
	}

	// try to unmarshal JSON data into String
	err = json.Unmarshal(data, &dst.String);
	if err == nil {
		jsonString, _ := json.Marshal(dst.String)
		if string(jsonString) == "{}" { // empty struct
			dst.String = nil
		} else {
			return nil // data stored in dst.String, return on the first match
		}
	} else {
		dst.String = nil
	}

	return fmt.Errorf("data failed to match schemas in anyOf(SqliteExecuteRequestStatement)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src *SqliteExecuteRequestStatement) MarshalJSON() ([]byte, error) {
	if src.ParameterizedQuery != nil {
		return json.Marshal(&src.ParameterizedQuery)
	}

	if src.String != nil {
		return json.Marshal(&src.String)
	}

	return nil, nil // no data in anyOf schemas
}

type NullableSqliteExecuteRequestStatement struct {
	value *SqliteExecuteRequestStatement
	isSet bool
}

func (v NullableSqliteExecuteRequestStatement) Get() *SqliteExecuteRequestStatement {
	return v.value
}

func (v *NullableSqliteExecuteRequestStatement) Set(val *SqliteExecuteRequestStatement) {
	v.value = val
	v.isSet = true
}

func (v NullableSqliteExecuteRequestStatement) IsSet() bool {
	return v.isSet
}

func (v *NullableSqliteExecuteRequestStatement) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSqliteExecuteRequestStatement(val *SqliteExecuteRequestStatement) *NullableSqliteExecuteRequestStatement {
	return &NullableSqliteExecuteRequestStatement{value: val, isSet: true}
}

func (v NullableSqliteExecuteRequestStatement) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSqliteExecuteRequestStatement) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


