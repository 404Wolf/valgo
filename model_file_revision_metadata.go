/*
Val Town API

Val Townâ€™s public API  OpenAPI JSON endpoint:  https://api.val.town/openapi.json

API version: 1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package valgo

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the FileRevisionMetadata type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FileRevisionMetadata{}

// FileRevisionMetadata A File or Directory's Metadata
type FileRevisionMetadata struct {
	Name string `json:"name"`
	// The id of the resource
	Id string `json:"id"`
	Path string `json:"path"`
	Version int32 `json:"version"`
	UpdatedAt time.Time `json:"updatedAt"`
	Type string `json:"type"`
	Links FileRevisionMetadataLinks `json:"links"`
}

type _FileRevisionMetadata FileRevisionMetadata

// NewFileRevisionMetadata instantiates a new FileRevisionMetadata object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFileRevisionMetadata(name string, id string, path string, version int32, updatedAt time.Time, type_ string, links FileRevisionMetadataLinks) *FileRevisionMetadata {
	this := FileRevisionMetadata{}
	this.Name = name
	this.Id = id
	this.Path = path
	this.Version = version
	this.UpdatedAt = updatedAt
	this.Type = type_
	this.Links = links
	return &this
}

// NewFileRevisionMetadataWithDefaults instantiates a new FileRevisionMetadata object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFileRevisionMetadataWithDefaults() *FileRevisionMetadata {
	this := FileRevisionMetadata{}
	return &this
}

// GetName returns the Name field value
func (o *FileRevisionMetadata) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *FileRevisionMetadata) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *FileRevisionMetadata) SetName(v string) {
	o.Name = v
}

// GetId returns the Id field value
func (o *FileRevisionMetadata) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *FileRevisionMetadata) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *FileRevisionMetadata) SetId(v string) {
	o.Id = v
}

// GetPath returns the Path field value
func (o *FileRevisionMetadata) GetPath() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Path
}

// GetPathOk returns a tuple with the Path field value
// and a boolean to check if the value has been set.
func (o *FileRevisionMetadata) GetPathOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Path, true
}

// SetPath sets field value
func (o *FileRevisionMetadata) SetPath(v string) {
	o.Path = v
}

// GetVersion returns the Version field value
func (o *FileRevisionMetadata) GetVersion() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Version
}

// GetVersionOk returns a tuple with the Version field value
// and a boolean to check if the value has been set.
func (o *FileRevisionMetadata) GetVersionOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Version, true
}

// SetVersion sets field value
func (o *FileRevisionMetadata) SetVersion(v int32) {
	o.Version = v
}

// GetUpdatedAt returns the UpdatedAt field value
func (o *FileRevisionMetadata) GetUpdatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *FileRevisionMetadata) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *FileRevisionMetadata) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = v
}

// GetType returns the Type field value
func (o *FileRevisionMetadata) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *FileRevisionMetadata) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *FileRevisionMetadata) SetType(v string) {
	o.Type = v
}

// GetLinks returns the Links field value
func (o *FileRevisionMetadata) GetLinks() FileRevisionMetadataLinks {
	if o == nil {
		var ret FileRevisionMetadataLinks
		return ret
	}

	return o.Links
}

// GetLinksOk returns a tuple with the Links field value
// and a boolean to check if the value has been set.
func (o *FileRevisionMetadata) GetLinksOk() (*FileRevisionMetadataLinks, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Links, true
}

// SetLinks sets field value
func (o *FileRevisionMetadata) SetLinks(v FileRevisionMetadataLinks) {
	o.Links = v
}

func (o FileRevisionMetadata) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FileRevisionMetadata) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["id"] = o.Id
	toSerialize["path"] = o.Path
	toSerialize["version"] = o.Version
	toSerialize["updatedAt"] = o.UpdatedAt
	toSerialize["type"] = o.Type
	toSerialize["links"] = o.Links
	return toSerialize, nil
}

func (o *FileRevisionMetadata) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"id",
		"path",
		"version",
		"updatedAt",
		"type",
		"links",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varFileRevisionMetadata := _FileRevisionMetadata{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varFileRevisionMetadata)

	if err != nil {
		return err
	}

	*o = FileRevisionMetadata(varFileRevisionMetadata)

	return err
}

type NullableFileRevisionMetadata struct {
	value *FileRevisionMetadata
	isSet bool
}

func (v NullableFileRevisionMetadata) Get() *FileRevisionMetadata {
	return v.value
}

func (v *NullableFileRevisionMetadata) Set(val *FileRevisionMetadata) {
	v.value = val
	v.isSet = true
}

func (v NullableFileRevisionMetadata) IsSet() bool {
	return v.isSet
}

func (v *NullableFileRevisionMetadata) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFileRevisionMetadata(val *FileRevisionMetadata) *NullableFileRevisionMetadata {
	return &NullableFileRevisionMetadata{value: val, isSet: true}
}

func (v NullableFileRevisionMetadata) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFileRevisionMetadata) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


